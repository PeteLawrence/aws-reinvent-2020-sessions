{"version":3,"sources":["logo.svg","pages/SessionsPage.js","App.js","reportWebVitals.js","index.js"],"names":["data","require","advancedFormat","dayjs","extend","SessionsPage","props","state","language","startTime","endTime","date","tags","getTags","allTags","sessions","session","split","hiddenTags","tag","includes","push","hiddenTag","sort","this","unix","schedulingData","start","timestamp","isSame","sessionStart","format","parseInt","match","selectedTag","filterSessions","map","sessionEnd","end","Card","className","Header","Title","name","Subtitle","Body","dangerouslySetInnerHTML","__html","description","Footer","Badge","variant","event","setState","target","value","selectedOptions","option","Form","Group","Label","Control","as","ref","onChange","handleLanguageChange","bind","getLanguages","lang","type","defaultValue","handleDateChange","handleStartTimeChange","handleEndTimeChange","handleTagChange","multiple","listSessions","React","Component","App","Container","Navbar","bg","expand","Brand","href","Toggle","aria-controls","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.867017b8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport dayjs from 'dayjs';\nimport Card from 'react-bootstrap/Card';\nimport Badge from 'react-bootstrap/Badge';\nimport { Form } from 'react-bootstrap';\n\nconst data = require('../data/schedule.json');\n\nvar advancedFormat = require('dayjs/plugin/advancedFormat');\ndayjs.extend(advancedFormat)\n\nclass SessionsPage extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      language: 'english',\n      startTime: 9,\n      endTime: 17,\n      date: '2020-12-02',\n      tags: this.getTags()\n    };\n  }\n\n\n  getLanguages() {\n    return [ 'english', 'Spanish' ];\n  }\n\n  getTags() {\n    let allTags = [];\n    for (let session of data.sessions) {\n      let tags = session.tags.split(',');\n      let hiddenTags = session.hiddenTags.split(',');\n\n      for (let tag of tags) {\n        if (!allTags.includes(tag)) {\n          allTags.push(tag);\n        }\n      }\n\n      for (let hiddenTag of hiddenTags) {\n        if (!allTags.includes(hiddenTag)) {\n          allTags.push(hiddenTag);\n        }\n      }\n    }\n\n    allTags.sort();\n\n    return allTags;\n  }\n  \n\n  filterSessions() {\n    let sessions = [];\n\n    for (let session of data.sessions) {\n      let tags = session.tags.split(',');\n      let hiddenTags = session.hiddenTags.split(',');\n\n      // Langauge Filter\n      if (this.state.language) {\n        if (!tags.includes(this.state.language) && !hiddenTags.includes(this.state.language)) {\n          continue;\n        }\n      }\n\n      // Date filter\n      if (this.state.date) {\n        let sessionStart = dayjs.unix(session.schedulingData.start.timestamp);\n        if (!sessionStart.isSame(this.state.date, 'day')) {\n          continue;\n        }\n      }\n\n      // Time filter\n      if (this.state.startTime && this.state.endTime) {\n        let sessionStart = dayjs.unix(session.schedulingData.start.timestamp);\n        if (sessionStart.format('H') < parseInt(this.state.startTime) || sessionStart.format('H') > parseInt(this.state.endTime)) {\n          continue;\n        }\n      }\n\n      // Tags filter\n      let match = false;\n\n      for (let selectedTag of this.state.tags) {\n        if (tags.includes(selectedTag) || hiddenTags.includes(selectedTag)) {\n          match = true;\n        }\n      }\n      if (!match) continue;\n\n      sessions.push(session);\n    }\n\n    return sessions;\n  }\n\n  listSessions() {\n    let sessions = this.filterSessions();\n\n    return sessions.map(session => {\n      let sessionStart = dayjs.unix(session.schedulingData.start.timestamp);\n      let sessionEnd = dayjs.unix(session.schedulingData.end.timestamp);\n\n      return(\n        <Card className=\"mb-3\">\n          <Card.Header>\n            <Card.Title>{ session.name }</Card.Title>\n            <Card.Subtitle>{ sessionStart.format('Do MMM HH:mm') } - { sessionEnd.format('HH:mm') }</Card.Subtitle>\n          </Card.Header>\n          <Card.Body>\n            <div dangerouslySetInnerHTML={{ __html: session.description }} />\n          </Card.Body>\n          <Card.Footer>\n              { session.tags.split(',').map(tag => {\n                  return (<Badge variant=\"primary\" className=\"mr-1\">{ tag }</Badge>);\n                })\n              }\n              { session.hiddenTags.split(',').map(tag => {\n                  return (<Badge variant=\"secondary\" className=\"mr-1\">{ tag }</Badge>);\n                })\n              }\n            </Card.Footer>\n        </Card>\n      )\n    });\n  }\n\n\n  handleLanguageChange(event) {\n    this.setState({\n      language: event.target.value\n    });\n  }\n\n  handleStartTimeChange(event) {\n    this.setState({\n      startTime: event.target.value\n    });\n  }\n\n  handleEndTimeChange(event) {\n    this.setState({\n      endTime: event.target.value\n    });\n  }\n\n  handleDateChange(event) {\n    this.setState({\n      date: event.target.value\n    });\n  }\n\n  handleTagChange(event) {\n    let tags = [];\n    for (let option of event.target.selectedOptions) {\n      tags.push(option.value);\n    }\n    \n    this.setState({\n      tags: tags\n    });\n  }\n\n\n  /**\n   * Renders the Marker component\n   * @return {[type]} [description]\n   */\n  render() {\n    return (\n      <>\n        <h1>Sessions</h1>\n\n        <Form>\n          <Form.Group>\n            <Form.Label>Language</Form.Label>\n            <Form.Control as=\"select\" ref=\"language\" onChange={this.handleLanguageChange.bind(this)} >\n              { this.getLanguages().map(lang => ( <option>{ lang }</option> ) ) }\n            </Form.Control>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Date</Form.Label>\n            <Form.Control type=\"date\" defaultValue=\"2020-12-02\" onChange={ this.handleDateChange.bind(this)} />\n          </Form.Group>\n          \n          <Form.Group>\n            <Form.Label>Time</Form.Label>\n            <Form.Control type=\"time\" defaultValue=\"9\" onChange={ this.handleStartTimeChange.bind(this)} />\n            <Form.Control type=\"time\" defaultValue=\"17\" onChange={ this.handleEndTimeChange.bind(this)}/>\n          </Form.Group>\n\n          <Form.Group>\n            <Form.Label>Tags</Form.Label>\n            <Form.Control as=\"select\" ref=\"tags\" onChange={this.handleTagChange.bind(this)} multiple >\n              { this.getTags().map(tag => ( <option>{ tag }</option> ) ) }\n            </Form.Control>\n          </Form.Group>\n        </Form>\n\n          { this.listSessions(this.state.language) }\n      </>\n    );\n  }\n}\nexport default SessionsPage;","import logo from './logo.svg';\nimport './App.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nimport SessionsPage from './pages/SessionsPage';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <Container>\n      <Router>\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">AWS re:invent 2020</Navbar.Brand>\n\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\n        </Navbar>\n\n        <Switch>\n\n          <Route exact path=\"/\">\n            <SessionsPage />\n          </Route>\n\n        </Switch>\n\n      </Router>\n\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}